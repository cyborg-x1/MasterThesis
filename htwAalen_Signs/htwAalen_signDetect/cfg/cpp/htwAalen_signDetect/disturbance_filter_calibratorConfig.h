//#line 2 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the htwAalen_signDetect package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __htwAalen_signDetect__DISTURBANCE_FILTER_CALIBRATORCONFIG_H__
#define __htwAalen_signDetect__DISTURBANCE_FILTER_CALIBRATORCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace htwAalen_signDetect
{
  class disturbance_filter_calibratorConfigStatics;
  
  class disturbance_filter_calibratorConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(disturbance_filter_calibratorConfig &config, const disturbance_filter_calibratorConfig &max, const disturbance_filter_calibratorConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const disturbance_filter_calibratorConfig &config1, const disturbance_filter_calibratorConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, disturbance_filter_calibratorConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const disturbance_filter_calibratorConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, disturbance_filter_calibratorConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const disturbance_filter_calibratorConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T disturbance_filter_calibratorConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (disturbance_filter_calibratorConfig::* field);

      virtual void clamp(disturbance_filter_calibratorConfig &config, const disturbance_filter_calibratorConfig &max, const disturbance_filter_calibratorConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const disturbance_filter_calibratorConfig &config1, const disturbance_filter_calibratorConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, disturbance_filter_calibratorConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const disturbance_filter_calibratorConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, disturbance_filter_calibratorConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const disturbance_filter_calibratorConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 9 "cfg/disturbance_filter_calibrator.cfg"
      double double_param0;
//#line 10 "cfg/disturbance_filter_calibrator.cfg"
      double double_param1;
//#line 11 "cfg/disturbance_filter_calibrator.cfg"
      double double_param2;
//#line 12 "cfg/disturbance_filter_calibrator.cfg"
      double double_param3;
//#line 13 "cfg/disturbance_filter_calibrator.cfg"
      double double_param4;
//#line 14 "cfg/disturbance_filter_calibrator.cfg"
      double double_param5;
//#line 15 "cfg/disturbance_filter_calibrator.cfg"
      double double_param6;
//#line 16 "cfg/disturbance_filter_calibrator.cfg"
      double double_param7;
//#line 19 "cfg/disturbance_filter_calibrator.cfg"
      bool use_custom_distance;
//#line 20 "cfg/disturbance_filter_calibrator.cfg"
      int custom_distance;
//#line 32 "cfg/disturbance_filter_calibrator.cfg"
      int distance;
//#line 39 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_picture;
//#line 48 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_picture_grid;
//#line 49 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_picture_grid_space;
//#line 53 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_highlight_row_enable;
//#line 54 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_highlight_row;
//#line 57 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_highlight_col_enable;
//#line 58 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_highlight_col;
//#line 61 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_zero_row_enable;
//#line 62 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_zero_row;
//#line 65 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_zero_col_enable;
//#line 66 "cfg/disturbance_filter_calibrator.cfg"
      int pcl_zero_col;
//#line 70 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_filter_test;
//#line 73 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_stop_output;
//#line 76 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_gather_values;
//#line 79 "cfg/disturbance_filter_calibrator.cfg"
      bool pcl_value_print;
//#line 138 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("disturbance_filter_calibratorConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const disturbance_filter_calibratorConfig &__max__ = __getMax__();
      const disturbance_filter_calibratorConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const disturbance_filter_calibratorConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const disturbance_filter_calibratorConfig &__getDefault__();
    static const disturbance_filter_calibratorConfig &__getMax__();
    static const disturbance_filter_calibratorConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const disturbance_filter_calibratorConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void disturbance_filter_calibratorConfig::ParamDescription<std::string>::clamp(disturbance_filter_calibratorConfig &config, const disturbance_filter_calibratorConfig &max, const disturbance_filter_calibratorConfig &min) const
  {
    return;
  }

  class disturbance_filter_calibratorConfigStatics
  {
    friend class disturbance_filter_calibratorConfig;
    
    disturbance_filter_calibratorConfigStatics()
    {
//#line 9 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param0 = 0.0;
//#line 9 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param0 = 10.0;
//#line 9 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param0 = 0.01;
//#line 9 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param0", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param0)));
//#line 10 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param1 = 0.0;
//#line 10 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param1 = 10.0;
//#line 10 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param1 = 0.01;
//#line 10 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param1", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param1)));
//#line 11 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param2 = 0.0;
//#line 11 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param2 = 10.0;
//#line 11 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param2 = 0.01;
//#line 11 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param2", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param2)));
//#line 12 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param3 = 0.0;
//#line 12 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param3 = 10.0;
//#line 12 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param3 = 0.01;
//#line 12 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param3", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param3)));
//#line 13 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param4 = 0.0;
//#line 13 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param4 = 100.0;
//#line 13 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param4 = 0.01;
//#line 13 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param4", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param4)));
//#line 14 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param5 = 0.0;
//#line 14 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param5 = 100.0;
//#line 14 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param5 = 0.01;
//#line 14 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param5", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param5)));
//#line 15 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param6 = 0.0;
//#line 15 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param6 = 100.0;
//#line 15 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param6 = 0.01;
//#line 15 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param6", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param6)));
//#line 16 "cfg/disturbance_filter_calibrator.cfg"
      __min__.double_param7 = 0.0;
//#line 16 "cfg/disturbance_filter_calibrator.cfg"
      __max__.double_param7 = 100.0;
//#line 16 "cfg/disturbance_filter_calibrator.cfg"
      __default__.double_param7 = 0.01;
//#line 16 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<double>("double_param7", "double", 0, "A double parameter", "", &disturbance_filter_calibratorConfig::double_param7)));
//#line 19 "cfg/disturbance_filter_calibrator.cfg"
      __min__.use_custom_distance = 0;
//#line 19 "cfg/disturbance_filter_calibrator.cfg"
      __max__.use_custom_distance = 1;
//#line 19 "cfg/disturbance_filter_calibrator.cfg"
      __default__.use_custom_distance = 0;
//#line 19 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("use_custom_distance", "bool", 0, "Use a custom distance for advisor", "", &disturbance_filter_calibratorConfig::use_custom_distance)));
//#line 20 "cfg/disturbance_filter_calibrator.cfg"
      __min__.custom_distance = 0;
//#line 20 "cfg/disturbance_filter_calibrator.cfg"
      __max__.custom_distance = 10000;
//#line 20 "cfg/disturbance_filter_calibrator.cfg"
      __default__.custom_distance = 5000;
//#line 20 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("custom_distance", "int", 0, "Enter a custom distance", "", &disturbance_filter_calibratorConfig::custom_distance)));
//#line 32 "cfg/disturbance_filter_calibrator.cfg"
      __min__.distance = 0;
//#line 32 "cfg/disturbance_filter_calibrator.cfg"
      __max__.distance = 10000;
//#line 32 "cfg/disturbance_filter_calibrator.cfg"
      __default__.distance = 500;
//#line 32 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("distance", "int", 0, "Select Distance", "{'enum_description': 'Distance Selector', 'enum': [{'srcline': 22, 'description': '0.5 meter', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 500, 'ctype': 'int', 'type': 'int', 'name': '0_5meter'}, {'srcline': 23, 'description': '1 meter', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 1000, 'ctype': 'int', 'type': 'int', 'name': '1meter '}, {'srcline': 24, 'description': '2 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 2000, 'ctype': 'int', 'type': 'int', 'name': '2meter'}, {'srcline': 25, 'description': '3 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 3000, 'ctype': 'int', 'type': 'int', 'name': '3meter'}, {'srcline': 26, 'description': '4 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 4000, 'ctype': 'int', 'type': 'int', 'name': '4meter'}, {'srcline': 27, 'description': '5 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 5000, 'ctype': 'int', 'type': 'int', 'name': '5meter'}, {'srcline': 28, 'description': '6 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 6000, 'ctype': 'int', 'type': 'int', 'name': '6meter'}, {'srcline': 29, 'description': '7 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 7000, 'ctype': 'int', 'type': 'int', 'name': '7meter'}, {'srcline': 30, 'description': '8 meters', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 8000, 'ctype': 'int', 'type': 'int', 'name': '8meter'}]}", &disturbance_filter_calibratorConfig::distance)));
//#line 39 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_picture = 0;
//#line 39 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_picture = 1;
//#line 39 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_picture = 0;
//#line 39 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_picture", "int", 0, "Select PCLPicture", "{'enum_description': 'PCLPicture', 'enum': [{'srcline': 35, 'description': 'Advisor', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Advisor'}, {'srcline': 36, 'description': 'RGB', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'RGB'}]}", &disturbance_filter_calibratorConfig::pcl_picture)));
//#line 48 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_picture_grid = 0;
//#line 48 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_picture_grid = 3;
//#line 48 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_picture_grid = 0;
//#line 48 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_picture_grid", "int", 0, "Select PCL Picture Grid", "{'enum_description': 'PCLPictureGrid', 'enum': [{'srcline': 42, 'description': 'Off', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Off'}, {'srcline': 43, 'description': 'Columns', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Columns'}, {'srcline': 44, 'description': 'Lines', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Lines'}, {'srcline': 45, 'description': 'Both', 'srcfile': 'cfg/disturbance_filter_calibrator.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Both'}]}", &disturbance_filter_calibratorConfig::pcl_picture_grid)));
//#line 49 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_picture_grid_space = 2;
//#line 49 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_picture_grid_space = 100;
//#line 49 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_picture_grid_space = 50;
//#line 49 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_picture_grid_space", "int", 0, "Enter grid spacing", "", &disturbance_filter_calibratorConfig::pcl_picture_grid_space)));
//#line 53 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_highlight_row_enable = 0;
//#line 53 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_highlight_row_enable = 1;
//#line 53 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_highlight_row_enable = 0;
//#line 53 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_highlight_row_enable", "bool", 0, "Enable single row highlight", "", &disturbance_filter_calibratorConfig::pcl_highlight_row_enable)));
//#line 54 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_highlight_row = 0;
//#line 54 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_highlight_row = 480;
//#line 54 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_highlight_row = 0;
//#line 54 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_highlight_row", "int", 0, "Select specific row", "", &disturbance_filter_calibratorConfig::pcl_highlight_row)));
//#line 57 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_highlight_col_enable = 0;
//#line 57 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_highlight_col_enable = 1;
//#line 57 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_highlight_col_enable = 0;
//#line 57 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_highlight_col_enable", "bool", 0, "Enable single column highlight", "", &disturbance_filter_calibratorConfig::pcl_highlight_col_enable)));
//#line 58 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_highlight_col = 0;
//#line 58 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_highlight_col = 640;
//#line 58 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_highlight_col = 0;
//#line 58 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_highlight_col", "int", 0, "Select specific column", "", &disturbance_filter_calibratorConfig::pcl_highlight_col)));
//#line 61 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_zero_row_enable = 0;
//#line 61 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_zero_row_enable = 1;
//#line 61 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_zero_row_enable = 0;
//#line 61 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_zero_row_enable", "bool", 0, "Enable setting one row to zero", "", &disturbance_filter_calibratorConfig::pcl_zero_row_enable)));
//#line 62 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_zero_row = 0;
//#line 62 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_zero_row = 480;
//#line 62 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_zero_row = 0;
//#line 62 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_zero_row", "int", 0, "Select specific row", "", &disturbance_filter_calibratorConfig::pcl_zero_row)));
//#line 65 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_zero_col_enable = 0;
//#line 65 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_zero_col_enable = 1;
//#line 65 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_zero_col_enable = 0;
//#line 65 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_zero_col_enable", "bool", 0, "Enable setting one column to zero", "", &disturbance_filter_calibratorConfig::pcl_zero_col_enable)));
//#line 66 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_zero_col = 0;
//#line 66 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_zero_col = 640;
//#line 66 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_zero_col = 0;
//#line 66 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<int>("pcl_zero_col", "int", 0, "Select specific column", "", &disturbance_filter_calibratorConfig::pcl_zero_col)));
//#line 70 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_filter_test = 0;
//#line 70 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_filter_test = 1;
//#line 70 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_filter_test = 0;
//#line 70 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_filter_test", "bool", 0, "Enable Filtertest", "", &disturbance_filter_calibratorConfig::pcl_filter_test)));
//#line 73 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_stop_output = 0;
//#line 73 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_stop_output = 1;
//#line 73 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_stop_output = 0;
//#line 73 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_stop_output", "bool", 0, "Stop output of new point clouds", "", &disturbance_filter_calibratorConfig::pcl_stop_output)));
//#line 76 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_gather_values = 0;
//#line 76 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_gather_values = 1;
//#line 76 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_gather_values = 1;
//#line 76 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_gather_values", "bool", 0, "Print values", "", &disturbance_filter_calibratorConfig::pcl_gather_values)));
//#line 79 "cfg/disturbance_filter_calibrator.cfg"
      __min__.pcl_value_print = 0;
//#line 79 "cfg/disturbance_filter_calibrator.cfg"
      __max__.pcl_value_print = 1;
//#line 79 "cfg/disturbance_filter_calibrator.cfg"
      __default__.pcl_value_print = 0;
//#line 79 "cfg/disturbance_filter_calibrator.cfg"
      __param_descriptions__.push_back(disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr(new disturbance_filter_calibratorConfig::ParamDescription<bool>("pcl_value_print", "bool", 0, "Print values", "", &disturbance_filter_calibratorConfig::pcl_value_print)));
//#line 239 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    disturbance_filter_calibratorConfig __max__;
    disturbance_filter_calibratorConfig __min__;
    disturbance_filter_calibratorConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const disturbance_filter_calibratorConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static disturbance_filter_calibratorConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &disturbance_filter_calibratorConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const disturbance_filter_calibratorConfig &disturbance_filter_calibratorConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const disturbance_filter_calibratorConfig &disturbance_filter_calibratorConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const disturbance_filter_calibratorConfig &disturbance_filter_calibratorConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<disturbance_filter_calibratorConfig::AbstractParamDescriptionConstPtr> &disturbance_filter_calibratorConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const disturbance_filter_calibratorConfigStatics *disturbance_filter_calibratorConfig::__get_statics__()
  {
    const static disturbance_filter_calibratorConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = disturbance_filter_calibratorConfigStatics::get_instance();
    
    return statics;
  }

//#line 22 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_0_5meter = 500;
//#line 23 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_1meter  = 1000;
//#line 24 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_2meter = 2000;
//#line 25 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_3meter = 3000;
//#line 26 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_4meter = 4000;
//#line 27 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_5meter = 5000;
//#line 28 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_6meter = 6000;
//#line 29 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_7meter = 7000;
//#line 30 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_8meter = 8000;
//#line 35 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_Advisor = 0;
//#line 36 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_RGB = 1;
//#line 42 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_Off = 0;
//#line 43 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_Columns = 1;
//#line 44 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_Lines = 2;
//#line 45 "cfg/disturbance_filter_calibrator.cfg"
      const int disturbance_filter_calibrator_Both = 3;
}

#endif // __DISTURBANCE_FILTER_CALIBRATORRECONFIGURATOR_H__
