#!/usr/bin/env python
PACKAGE = "htwAalen_signDetect"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("double_param0", double_t, 0, "A double parameter", .01, 0, 10);
gen.add("double_param1", double_t, 0, "A double parameter", .01, 0, 10);
gen.add("double_param2", double_t, 0, "A double parameter", .01, 0, 10);
gen.add("double_param3", double_t, 0, "A double parameter", .01, 0, 10);
gen.add("double_param4", double_t, 0, "A double parameter", .01, 0, 100);
gen.add("double_param5", double_t, 0, "A double parameter", .01, 0, 100);
gen.add("double_param6", double_t, 0, "A double parameter", .01, 0, 100);
gen.add("double_param7", double_t, 0, "A double parameter", .01, 0, 100); 

# Distance options
gen.add("use_custom_distance", bool_t, 0, "Use a custom distance for advisor", False);
gen.add("custom_distance", int_t, 0, "Enter a custom distance", 5000, 0, 10000); 

depth_enum = gen.enum([ gen.const("0_5meter", int_t, 500, "0.5 meter"),
                        gen.const("1meter ", int_t, 1000, "1 meter"),
                        gen.const("2meter", int_t, 2000, "2 meters"),
                        gen.const("3meter", int_t, 3000, "3 meters"),
                        gen.const("4meter", int_t, 4000, "4 meters"),
                        gen.const("5meter", int_t, 5000, "5 meters"),
                        gen.const("6meter", int_t, 6000, "6 meters"),
                        gen.const("7meter", int_t, 7000, "7 meters"),
                        gen.const("8meter", int_t, 8000, "8 meters") ],
                                    "Distance Selector")
gen.add("distance", int_t, 0, "Select Distance", 500, 0, 10000, edit_method=depth_enum)

#PCL overlay picture
pclpic_enum = gen.enum([ gen.const("Advisor",     int_t, 0, "Advisor"    ),
                         gen.const("RGB", int_t, 1, "RGB"), ],
                                    "PCLPicture")

gen.add("pcl_picture", int_t, 0, "Select PCLPicture", 0, 0, 1, edit_method=pclpic_enum)

#PCL overlay grid, line and column options
grid_enum = gen.enum([   gen.const("Off",       int_t, 0, "Off"    ),
                         gen.const("Columns",   int_t, 1, "Columns" ), 
                         gen.const("Lines",     int_t, 2, "Lines"   ),
                         gen.const("Both",      int_t, 3, "Both"    ),],
                                    "PCLPictureGrid")

gen.add("pcl_picture_grid", int_t, 0, "Select PCL Picture Grid", 0, 0, 3, edit_method=grid_enum)
gen.add("pcl_picture_grid_space", int_t, 0, "Enter grid spacing", 50, 2, 100); 


#PCL overlay single row
gen.add("pcl_highlight_row_enable", bool_t, 0, "Enable single row highlight", False);
gen.add("pcl_highlight_row", int_t, 0, "Select specific row", 0, 0, 480); 

#PCL overlay single column
gen.add("pcl_highlight_col_enable", bool_t, 0, "Enable single column highlight", False);
gen.add("pcl_highlight_col", int_t, 0, "Select specific column", 0, 0, 640);

#PCL set specific row zero
gen.add("pcl_zero_row_enable", bool_t, 0, "Enable setting one row to zero", False);
gen.add("pcl_zero_row", int_t, 0, "Select specific row", 0, 0, 480); 

#PCL set specific col zero
gen.add("pcl_zero_col_enable", bool_t, 0, "Enable setting one column to zero", False);
gen.add("pcl_zero_col", int_t, 0, "Select specific column", 0, 0, 640);


#PCL filtering test
gen.add("pcl_filter_test", bool_t, 0, "Enable Filtertest", False);

#PCL stop output (static image)
gen.add("pcl_stop_output", bool_t, 0, "Stop output of new point clouds", False);

#PCL print values in depth picture
gen.add("pcl_gather_values", bool_t, 0, "Print values", True);

#PCL print values in depth picture
gen.add("pcl_value_print", bool_t, 0, "Print values", False);

#Statistics
gen.add("fetchValues", bool_t, 0, "Fetch values for statistics", False);
gen.add("outputValues", bool_t, 0, "Output values for statistics", False);





exit(gen.generate(PACKAGE, "htwAalen_signDetect", "disturbance_filter_calibrator"))